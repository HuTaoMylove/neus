Process rays data!
There are 1394 batches of rays and each batch contains 3600 rays
Traceback (most recent call last):
  File "main.py", line 160, in <module>
    rgb, _, eikonal = render_rays(sdf_network, color_network, deviation_network, rays_od, bound=bound,
  File "/data/home/yemingzhi/nerf/neus/Render.py", line 77, in render_rays
    rgb, weights, eikonal = get_rgb_w(sdf_network, color_network, deviation_network, pts, rays_d, z_vals,
  File "/data/home/yemingzhi/nerf/neus/Render.py", line 21, in get_rgb_w
    gradients = sdf_network.gradient(pts_flat).squeeze()
  File "/data/home/yemingzhi/nerf/neus/Network.py", line 147, in gradient
    gradients = torch.autograd.grad(
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/autograd/__init__.py", line 303, in grad
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 450.00 MiB (GPU 0; 23.65 GiB total capacity; 21.95 GiB already allocated; 344.31 MiB free; 22.56 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Process rays data!
There are 1476 batches of rays and each batch contains 3400 rays
Traceback (most recent call last):
  File "main.py", line 160, in <module>
    rgb, _, eikonal = render_rays(sdf_network, color_network, deviation_network, rays_od, bound=bound,
  File "/data/home/yemingzhi/nerf/neus/Render.py", line 77, in render_rays
    rgb, weights, eikonal = get_rgb_w(sdf_network, color_network, deviation_network, pts, rays_d, z_vals,
  File "/data/home/yemingzhi/nerf/neus/Render.py", line 21, in get_rgb_w
    gradients = sdf_network.gradient(pts_flat).squeeze()
  File "/data/home/yemingzhi/nerf/neus/Network.py", line 147, in gradient
    gradients = torch.autograd.grad(
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/autograd/__init__.py", line 303, in grad
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 426.00 MiB (GPU 0; 23.65 GiB total capacity; 22.14 GiB already allocated; 216.31 MiB free; 22.69 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Process rays data!
There are 1568 batches of rays and each batch contains 3200 rays
Traceback (most recent call last):
  File "main.py", line 160, in <module>
    rgb, _, eikonal = render_rays(sdf_network, color_network, deviation_network, rays_od, bound=bound,
  File "/data/home/yemingzhi/nerf/neus/Render.py", line 77, in render_rays
    rgb, weights, eikonal = get_rgb_w(sdf_network, color_network, deviation_network, pts, rays_d, z_vals,
  File "/data/home/yemingzhi/nerf/neus/Render.py", line 22, in get_rgb_w
    sampled_color = color_network(pts_flat, gradients, dir_flat, feature_vector).reshape(pts.shape)
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/home/yemingzhi/nerf/neus/Network.py", line 234, in forward
    x = self.relu(x)
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/activation.py", line 103, in forward
    return F.relu(input, inplace=self.inplace)
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/nn/functional.py", line 1457, in relu
    result = torch.relu(input)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 400.00 MiB (GPU 0; 23.65 GiB total capacity; 22.31 GiB already allocated; 356.31 MiB free; 22.55 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Process rays data!
There are 1673 batches of rays and each batch contains 3000 rays
Traceback (most recent call last):
  File "main.py", line 160, in <module>
    rgb, _, eikonal = render_rays(sdf_network, color_network, deviation_network, rays_od, bound=bound,
  File "/data/home/yemingzhi/nerf/neus/Render.py", line 77, in render_rays
    rgb, weights, eikonal = get_rgb_w(sdf_network, color_network, deviation_network, pts, rays_d, z_vals,
  File "/data/home/yemingzhi/nerf/neus/Render.py", line 22, in get_rgb_w
    sampled_color = color_network(pts_flat, gradients, dir_flat, feature_vector).reshape(pts.shape)
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/home/yemingzhi/nerf/neus/Network.py", line 234, in forward
    x = self.relu(x)
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/activation.py", line 103, in forward
    return F.relu(input, inplace=self.inplace)
  File "/data/home/yemingzhi/miniconda3/envs/env38/lib/python3.8/site-packages/torch/nn/functional.py", line 1457, in relu
    result = torch.relu(input)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 376.00 MiB (GPU 0; 23.65 GiB total capacity; 22.21 GiB already allocated; 202.31 MiB free; 22.70 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
